set nocompatible " no compatible with the original Vi filetype off
    " Language and Font  {{{1
    if has('win32')
        set langmenu=en_US.UTF-8
        language message en_US.UTF-8
        set encoding=utf8
        set fileencoding=utf8
        set guifont=Hack\ Nerd\ Font\ Mono:h14
        set guifontwide=D2codingligature\ Nerd\ Font:h14
    elseif has('macunix')
        "set langmenu=en_US.UTF-8
        "language message en_US.UTF-8
        set linespace=3	
        set encoding=utf-8
        set fileencoding=utf8
        set guifont=D2CodingLigature\ Nerd\ Font:h22
        noremap <silent> <f3> :call GfnToggle()<cr>
        function! GfnToggle()
            if &gfn == 'hack_nerd_font:h22'
                set guifont=D2CodingLigature\ Nerd\ Font:h22
            else
                set guifont=hack_nerd_font:h22
            endif
        endfunction
    endif
    " }}}1
    " Plugins list{{{1
    call plug#begin('~/.vim/plugged')         "Plugins will be downloaded under the specified directory.
        Plug 'junegunn/vim-plug'                " A minimalist Vim plugin manager
        Plug 'junegunn/vim-easy-align'          " A simple, easy-to-use Vim alignment plugic
        Plug 'junegunn/fzf.vim'                 " fzf setting
        Plug '/opt/homebrew/opt/fzf'            " fzf setting
        Plug 'airblade/vim-gitgutter'           " Shows a git diff in the sign column
        Plug 'altercation/vim-colors-solarized' " Solarized color scheme
        Plug 'dense-analysis/ale'               " Asynchronous Lint Engine
        Plug 'frazrepo/vim-rainbow'             " Rainbow Parentheses Improved
        Plug 'mhinz/vim-startify'               " The fancy start screen for vim
        Plug 'nathanaelkane/vim-indent-guides'  " Indent guide
        Plug 'rking/ag.vim'                     " The silver search for Vim
        Plug 'scrooloose/nerdcommenter'         " Vim plugin for commenting
        Plug 'preservim/nerdtree'              " A tree expolre plugins for Vim
            Plug 'Xuyuanp/nerdtree-git-plugin'
            Plug 'ryanoasis/vim-devicons'                   "
            Plug 'tiagofumo/vim-nerdtree-syntax-highlight'  "
            Plug 'PhilRunninger/nerdtree-visual-selection'
        Plug 'scrooloose/syntastic'             " Syntax checking hacks for Vim
        Plug 'tpope/vim-fugitive'               " Git in the Vim
        Plug 'tpope/vim-rhubarb'                " Hub in the Vim
        Plug 'tpope/vim-sensible'               " A universal set of defaults
        Plug 'tpope/vim-surround'               " Quotation and Parenthesis
        Plug 'vim-airline/vim-airline'          " status/tabline for vim
            Plug 'vim-airline/vim-airline-themes'   " Vrvcm-airline themes
        Plug 'davidhalter/jedi-vim'             " Python autocompletion
        Plug 'hynek/vim-python-pep8-indent'     " Python auto indent
        Plug 'nvie/vim-flake8'                  " Python syntax check
        Plug 'bagrat/vim-buffet'                " Vim buffer improve
        Plug 'lervag/vimtex'                    " Latex editor for Vim
        Plug 'git@github.com:SirVer/ultisnips.git'
            Plug 'git@github.com:honza/vim-snippets.git'
        Plug 'wfxr/minimap.vim'                 "Blazing fast minimap for vim
    call plug#end()
    " }}}1
    " Plugins Specific Setting -------------------- {{{1
        " Indent Guide ---------------------- {{{2
            let g:indent_guides_enable_on_vim_startup = 1
            let g:indent_guides_guide_size = 1
            let g:indent_guides_start_level = 1
            " Indent settings like ts, sw, and et affect this plugin. See the indent ENV. below.
        " }}}2
        " Jedi-vim ---------------------- {{{2
            let g:jedi#show_call_signatures=0
            let g:jedi#popup_select_first="0"
            let g:jedi#force_py_version=3
        " }}}2
        " NERDTree ---------------------- {{{2
            noremap <C-N> :NERDTreeToggle<CR>
            "close vim if the only window left open is a NERDTree
                autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") 
                    \ && b:NERDTree.isTabTree()) | q | endif	
            " If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
                autocmd BufEnter * if winnr() == winnr('h') && bufname('#') 
                    \ =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' 
                    \ && winnr('$') > 1 | let buf=bufnr() | buffer# | execute "normal! \<C-W>w" 
                    \ | execute 'buffer'.buf | endif
            "Lines in the file are displayed as shown below. 
                let g:NERDTreeFileLines = 0
            "Ignore some files
                let NERDTreeIgnore = [
                    \ '\.aux$' ,
                    \ '\.fdb_latexmk$' ,
                    \ '\.fls$' ,
                    \ '\.nav$' ,
                    \ '\.out$' ,
                    \ '\.snm$' ,
                    \ '\.synctex.gz$' ,
                    \ '\.toc$' ,
                    \ '\.log$' ,
                    \ '\.bak$' ,
                    \ ]
                let NERDTreeSortOrder = [
                    \ '\/$'    ,
                    \ '\.do$'  ,
                    \ '\.ado$' ,
                    \ '\.csv$' ,
                    \ '\.py$'  ,
                    \ '\.tex$'  ,
                    \ '\.txt$' ,
                    \ '\.dta$' ,
                    \ '\.xls$' ,
                    \ '\.xlsx$' ,
                    \ 'myvimrc' ,
                    \ '\.snippets$' ,
                    \ '*'      ,
                    \ '\.log$' ,
                    \ '\.swp$' ,
                    \ '\.bak$' ,
                    \ '\~$'    ,
                    \ '\.old$' ,
                    \]
                let NERDTreeNaturalSort = 1
            "From nerdtree-git-plugin
                "let g:NERDTreeGitStatusUntrackedFilesMode = 'all' " a heavy feature too. default: normal
                let g:NERDTreeGitStatusGitBinPath = 'git' " default: git (auto find in path)
                let g:NERDTreeGitStatusShowClean = 1 " default: 0
                let g:NERDTreeGitStatusConcealBrackets = 1 " default: 0
        " }}}2
        " Rainbow Parentheses Improved ---------------------- {{{2
            let g:rainbow_active = 1
        " }}}2
        " Solarized ---------------------- {{{2
            colorscheme solarized
            let g:solarized_menu=1
        " }}}2
        " Startify ---------------------- {{{2
            let g:startify_skiplist = [
                \ '\.log$',
                \ '\.bak$',
                \ ]
        " }}}2
        " Synatstic ---------------------- {{{2
            set statusline+=%#warningmsg#
            set statusline+=%{SyntasticStatuslineFlag()}
            set statusline+=%*
            let g:syntastic_always_populate_loc_list = 1
            let g:syntastic_auto_loc_list = 1
            let g:syntastic_check_on_open = 1
            let g:syntastic_check_on_wq = 0
        " }}}2
        " UltiSnips ---------------------- {{{2
            " Debug
                let g:UltiSnipsDebug=1
                let g:UltiSnipsLogFile = 
                    \ expand("$HOME/GitHub/master/vim_configs/UltiSnips/ultisnips_debug.log")
            " If you want :UltiSnipsEdit to split your window.
                let g:UltiSnipsEditSplit="vertical"
            " Change the snipptes path
                let g:UltiSnipsSnippetDirectories = [
                    \ expand("$HOME/GitHub/master/vim_configs/UltiSnips"),
                    \ 'UltiSnips'
                    \ ]
            " UltiSnipsEdit 전용 스니펫 저장 디렉토리
                let g:UltiSnipsSnippetStorageDirectoryForUltiSnipsEdit = 
                    \ expand("$HOME/GitHub/master/vim_configs/UltiSnips")
            " UltiSnips 설정: Tab 키를 스니펫 확장 및 이동에 사용
                let g:UltiSnipsExpandOrJumpTrigger = "<Tab>"
                let g:UltiSnipsJumpForwardTrigger  = "<Tab>"
                let g:UltiSnipsJumpBackwardTrigger = "<S-Tab>"
        " }}}2
        " Vim-airline ---------------------- {{{2
            let g:airline_theme='solarized'
            let g:airline_powerline_fonts = 1
            let g:airline#extensions#tabline#enabled = 1
            let g:airline#extensions#tabline#formatter = 'default'
            noremap <silent> <f5> :call BgToggle()<cr>
            function! BgToggle()
                if &background == 'dark'
                    let g:airline_solarized_bg='light'
                    set background=light
                else
                    let g:airline_solarized_bg='dark'
                    set background=dark
                endif
            endfunction
            "Color Change{{{3
                let currentHour = strftime("%H")
                let currentTime = strftime("%Y %b %d %T")
                if currentHour < 7 + 0
                    let g:airline_solarized_bg='dark'
                    set background=dark
                elseif currentHour < 18 + 0
                    let g:airline_solarized_bg='light'
                    set background=light
                else
                    let g:airline_solarized_bg='dark'
                    set background=dark
                endif
            "}}}3
        "}}}2
        " Vim-buffet ---------------------- {{{2
            let g:buffet_use_devicons = 1
            let g:buffet_show_index = 1
        " }}}2
        " Vim-devicons ---------------------- {{{2
            let g:webdevicons_conceal_nerdtree_brackets = 1
            let g:webdevicons_enable_airline_tabline = 1
            let g:webdevicons_enable_airline_statusline = 1
            let g:webdevicons_enable_startify = 1
            " add or override individual additional filetypes
                let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {} " needed
                let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['dta'] = ''
                let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['old'] = '󰯆'
                let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['log'] = ''
                let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['tex'] = ''
                let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['do'] = ''
                let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['ado'] = ''
                let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['snippets'] = ''  
                let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['pdf'] = ''
                let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['csv'] = ''
                let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['xls'] = ''
                let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['xlsx'] = ''
                "refer from the nerdfont on the web
        " }}}2
        " Vim-python-pep8-indent ---------------------- {{{2
            filetype plugin indent on
        " }}}2
        "Vimtex{{{2
            " Vimtex의 특정 경고를 무시
            let g:vimtex_quickfix_ignore_filters = [
                \ '.*You should put a space in front of parenthesis.*',
                \ '.*Redefining Unicode character.*'
                \ ]
            " chktex의 경고를 무시 
                let g:vimtex_lint_enabled = 1
                let g:vimtex_lint_progname = 'chktex'
            " PDF 뷰어를 Skim으로 설정
                let g:vimtex_view_method = 'skim'
            " latexmk를 사용하여 실시간 자동 컴파일 설정
                let g:vimtex_compiler_method = 'latexmk'
            " Skim에서 PDF 파일을 열 때, 파일을 자동으로 다시 불러오도록 설정
                let g:vimtex_view_skim_activate = 1
                let g:tex_flavor = 'latex'
            " Vimtex의 디버깅 모드 활성화
                let g:vimtex_log_verbose = 1
                let g:vimtex_log_file = '/tmp/vimtex_debug.log'
            " Vimtex의 toc창을 오른쪽으로
                let g:vimtex_toc_config = {
                    \'split_pos'   : ':vert :botright',
                    \'split_width':  50,
                \}
            " Vim 종료시 보조파일 삭제
                autocmd VimLeave * if exists(':VimtexClean') | VimtexClean | endif
            " Vimtex의 compiler 변경
                "let g:vimtex_compiler_latexmk = {
                    "\ 'executable' : 'latexmk',
                    "\ 'options' : [
                    "\ '-pdf',
                    "\ '-xelatex',
                    "\ '-file-line-error',
                    "\ '-synctex=1',
                    "\ '-interaction=nonstopmode',
                    "\ ],
                "\}
        "}}}2
        " minimap ---------------------- {{{2
            let g:minimap_width = 10
            let g:minimap_auto_start = 1
            let g:minimap_auto_start_win_enter = 1
            let g:minimap_highlight_search = 1
            let g:minimap_git_colors = 1
        " }}}2
    " }}}1
    " Environment Setting ---------------------- {{{1
        " Basic " {{{2
            set number                                          " Show line number
            set relativenumber                                  " Show line number relative
            set showmatch                                       " Show matching brackets when text indicator is over them
            set matchpairs+=<:>                                 " Also match < & > with %.
            set backspace=indent,eol,start                      " Allow backspacing over everything.
            set history=1000                                    " Keep 1000 lines of command line history.
            set backup                                          " Keep backup file when writing.
            set backupext=.bak                                  " Extension for backup files (modified in autocmd below).
            set backupskip=/tmp/*                               " No backup for these files.
            set undofile                                        " Save undo to file.
            set notitle                                         " Don't update term title.
            set shortmess-=S                                    " Show match count on n.
            set shortmess+=aFI                                  " a: abbreviate a few things
                                                                " F: don't show file info with :edit etc.
                                                                " I: don't show :intro message
            set virtualedit=block                               " Allow virtual editing in visual block mode.
            set display=lastline,uhex                           " lastline → Show as much of the last line as possible instead of @.
                                                                " uhex     → Always show unprintable chars as <xx> instead of ^C.
            set formatoptions+=ncroqlj                          " n   Recognize numbered lists when formatting (see formatlistpat)
                                                                " c   Wrap comments with textwidth
                                                                " r   Insert comment char after enter
                                                                " o   Insert comment char after o/O
                                                                " q   Format comments with gq
                                                                " l   Don't break lines when they were longer than textwidth to start with.
                                                                " j   Remove comment character when joining lines with J.
            set updatecount=50                                  " Write to swap every 50 characters.
            set wildmenu                                        " Better tab completion at the command-line.
            set wildmode=longest:full                           " Complete longest match, list other matches in wildmenu.
            set wildignorecase                                  " Case is ignored when completing file names and directories.
            set wildignore+=*.o,*.png,*.jpg,*.jpeg,*.webp,*.gif " Ignore these files in completion.
            set wildoptions=pum                                 " Show pop-up menu.
            set wildcharm=<tab>                                 " Trigger wild mode from mappings/macros.
            set completeopt=menuone,noselect                    " Insert mode completion:
                                                                " menuone   → always show menu, even when there is 1 match.
                                                                " noselect  → don't select an option when starting.
            set completepopup=highlight:Pmenu,border:off        " Options for preview popup in completion.
            set pumheight=10                                    " Don't make completion menu too high.
            set scrolloff=2                                     " Minimum number of lines to keep above/below cursor.
            set listchars=tab:!·,trail:·                        " String to use in 'list' mode.
            set previewheight=6                                 " Height of preview window.
            set infercase                                       " Like smartcase for insert completion.
            set textwidth=250                                   " Wrap at ??? characters.
            set colorcolumn=90                                  " Show a vertical guide at ??? characters.
            set showcmd                                         " Show partial command in the last line of the screen.
            set nojoinspaces                                    " Don't add two spaces after interpunction when using J.
            set switchbuf=useopen,usetab,newtab                 " Use open tab (if any) when trying to jump to a quickfix error.
            set synmaxcol=5000                                   " Maximum column in which to search for syntax items.
            set nrformats=unsigned                              " Ignore '-' in front of numbers when increment nrs.
            set nofoldenable                                    " Disable folds by default.
            set tabpagemax=500                                  " Max. number of tabs to be open with -p argument or :tab all.
            set tildeop                                         " Use ~ as an operator to switch case.
            set visualbell                                      " Use a visual bell instead of beeping.
            set nocursorcolumn                                  " No highlight the screen column of the cursor.
            set foldmethod=marker                               " The kind of folding used for the current window.
            set nolist                                          " No list mode.
            set noimd
            syntax enable
            "set gdefault                                       " Always use the /g flag with :s; add /g to restore the default.
            "set t_ti= t_te=                                    " Prevent clearing the terminal on exit.
            "set mouse=                                         " I don't want mouse support.
            "set paragraphs=                                    " Don't include nroff stuff.
            "set clipboard=                                     " Never automatically interface with system clipboard.
        " }}}2
    " Diff {{{2
        if &diff
            set diff
            set scrollbind
            set cursorbind
            set scrollopt
            set nowrap
            set foldmethod=diff
            set diffopt=filler,vertical
        endif
    "}}}2
    "Indent{{{2
        set autoindent                 " Copy indent from current line when starting a new line.
        set copyindent                 " Copy indent for new lines when auto-indenting.
        set shiftround                 " Round indent to multiple of shiftwidth when using < and >
        set linebreak                  " Wrap at word.
        set showbreak=↪                " Display at the start of line for wrapped lines.
        set breakindent                " When wrapping show next line on the same indent level.
        set breakindentopt=sbr,list:-1 " sbr  → Display showbreak before indent.
                                       " list → indent list if it matches formatlistpat
        set noshowmode                 " Don't show mode in cmdline.
        set smartindent
        set smarttab                   " Backspace at start of line remove shiftwidith worth of space.
        set tabstop=4
        set softtabstop=2
        set shiftwidth=4
        set expandtab
    " }}}2
    "Search " {{{2
        set incsearch                          " Jump to match while typing the pattern in /.
        set hlsearch                           " Highlight last used search pattern.
            nnoremap <silent> <leader>h :silent set hls!<cr>
        set ignorecase                         " Case-insensitive searching unless \C is in the pattern…
        set smartcase                          " …or the pattern contains an upper-case letter.
        set nowrapscan                         " Don't wrap search.
        "augroup vimrc-incsearch-highlight
            autocmd!
            autocmd CmdlineEnter /,\? :set hlsearch
            autocmd CmdlineLeave /,\? :set nohlsearch
        "augroup END
    " }}}2
    " }}}1
    " Key Mappings ---------------------- {{{1
        " Global {{{2
            map <leader><leader> :Startify<cr>
            map <leader>m :MinimapToggle<cr>
            map <leader>t :echo strftime('%Y년 %B %d일 %X')<cr>
            map <leader>sc :w<cr>:source %<cr>
            map <leader>sp :UltiSnipsEdit<cr>
            map <leader>rc :e $MYVIMRC<cr>
            map <leader>brc :w! ~/github/master/etc/myvimrc<cr>
            map <leader>urc :e! ~/github/master/etc/myvimrc<cr>:w! $MYVIMRC<cr>:source $MYVIMRC<cr>
            map <leader>l :set list!<cr>
            map <silent> <leader>box :cd ~/dropbox<cr>:pwd<cr>
            map <silent> <leader>git :cd ~/Github/master<cr>:pwd<cr>
        "}}}2
        " Insert Mode {{{2
            inoremap <F2> <C-o>:w<CR>
            inoremap jk <esc>
            inoremap ㅓㅏ <esc>
        "}}}2
        " Normal Mode {{{2
            nnoremap <F2> :w<cr>
            nnoremap <space> za
            nnoremap <c-w>. 10<c-w>>
            nnoremap <c-w>, 10<c-w><
            nnoremap <leader>" viW<esc>a"<esc>Bi"<esc>ee
            nnoremap <leader>` viW<esc>a'<esc>Bi`<esc>ee
            nnoremap <leader>' viW<esc>a'<esc>Bi'<esc>ee
            nnoremap <leader>> viW<esc>a><esc>Bi<<esc>ee
            nnoremap <leader>) viW<esc>a)<esc>Bi(<esc>ee
            nnoremap :: :<up><cr>
            nnoremap Y y$
            nnoremap cW viwc
            nnoremap <leader>ff O<c-d>/*{{{*/<esc>bf*a
            nnoremap <leader>fc mgo<c-d>/*}}}*/<esc>`g
        "}}}2
        " Visual Mode {{{2
            vnoremap <space> iw
        "}}}2
        "Operator-pending Mode {{{2
            onoremap in( :<c-u>normal! f(vi(<cr>
            onoremap il( :<c-u>normal! F)vi(<cr>
            onoremap in' :<c-u>normal! f'vi'<cr>
            onoremap il' :<c-u>normal! F'vi'<cr>
            onoremap in` :<c-u>normal! f`vi`<cr>
            onoremap il` :<c-u>normal! F`vi`<cr>
            onoremap in" :<c-u>normal! f"vi"<cr>
            onoremap il" :<c-u>normal! F"vi"<cr>
            onoremap in[ :<c-u>normal! f[vi[<cr>
            onoremap il[ :<c-u>normal! F]vi[<cr>
            onoremap in{ :<c-u>normal! f{vi{<cr>
            onoremap il{ :<c-u>normal! F}vi{<cr>
            onoremap in< :<c-u>normal! f<vi<<cr>
            onoremap il< :<c-u>normal! F>vi<<cr>
        " }}} 2
        " Command Line {{{2
            cnoreabbrev VS vs<Bar>bnext
            cnoreabbrev VP vs<Bar>bprevious
            cnoreabbrev VD vert diffsplit
            cnoreabbrev W w
            cnoreabbrev Wq wq
            cnoreabbrev H vert h
            cnoreabbrev HR vert bo h
            cnoreabbrev Bd bd
        "}}}2
        " Buffer {{{2
            noremap <silent> <Tab> :bn<CR>
            noremap <silent> <S-Tab> :bp<CR>
            noremap <silent> <Leader><Tab> :Bw<CR>
            noremap <silent> <Leader><S-Tab> :Bw!<CR>
            noremap <silent> <C-t> :tabnew split<CR>
        "}}}2
        " EasyAlign {{{2
            nmap ga <Plug>(EasyAlign)
            xmap ga <Plug>(EasyAlign)
        "}}}2
        "Python Mapping {{{2
            autocmd FileType python map <buffer> <F9> :w<CR>:exec '!python3' shellescape(@%, 1)<CR>
            autocmd FileType python imap <buffer> <F9> <esc>:w<CR>:exec '!python3' shellescape(@%, 1)<CR>
        " }}}2
        "STATA Mapping {{{2
            if has('win32')
                autocmd FileType stata set iskeyword-=_
                autocmd FileType stata nnoremap <F8> :!"c:\stata\stataMP-64.exe" doedit %:p<CR><CR>
                autocmd FileType stata inoremap <F8> :!"c:\stata\stataMP-64.exe" doedit %:p<CR><CR>
                autocmd FileType stata nnoremap <F9> :w<CR>:!"c:\stata\stataMP-64.exe" /e do %:p<CR>:! move %:t:r.log %:p:r.log <CR>:e %:p:r.log<CR>:set syntax=stata<CR>
            elseif has('macunix')
                autocmd FileType stata set iskeyword-=_
                autocmd FileType stata nnoremap <F8> :! /Applications/StataNow/StataMP.app/Contents/MacOS/StataMP doedit %:p<CR>
                autocmd FileType stata inoremap <F8> :! /Applications/StataNow/StataMP.app/Contents/MacOS/StataMP doedit %:p<CR>
                autocmd FileType stata nnoremap <F9> :w<CR>:! /Applications/StataNow/StataMP.app/Contents/MacOS/StataMP -e do %:p<CR>:!mv %:t:r.log %:p:r.log<CR>:e %:p:r.log<CR>:set syntax=stata<CR>
            endif
        " }}}2
    " }}}1
syntax on "force to the syntax highlight function
