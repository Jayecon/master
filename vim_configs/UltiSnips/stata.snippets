#<silent>  UltiSnips for Data Cleaning in Stata

snippet des "destring"
destrign ${1:var_list}
endsnippet

snippet tos "tostring"
tostrign ${1:var_list}
endsnippet

snippet ff "if roof"
if ( ${1:condition} ) {
	${2:in roof code here}
}
endsnippet

snippet fe "else roof"
else  {
	${1:in roof code here}
}
endsnippet

snippet fl "elseif roof"
elseif ( ${1:condition} ) {
	${2:in roof code here}
}
endsnippet

snippet fe "foreach roof"
foreach ${1:indicator} ${2:in/of}  ${3:value} {
	${4:in roof code here}
}
endsnippet

snippet fv "forvalue roof"
forvalue ${1:indicator} = ${2:exp} {
	${3:in roof code here}
}
endsnippet

snippet gen "generate variable"
generate ${1:newvar_name} = ${2:exp}
	label var $1 "${3:var_label}"
endsnippet

snippet !ms "not missing condition"
!missing(${1:var_name})
endsnippet

snippet ms "missing condition"
missing(${1:var_name})
endsnippet

snippet mvd "destring"
mvdecode ${1:var_list}, mv(${2:value_list})
endsnippet

snippet inl "inlist condition"
inlist(${1:var_name}, ${2:exp})
endsnippet

snippet !inl "not inlist condition"
!inlist(${1:var_name}, ${2:exp})
endsnippet

snippet inr "inrange"
inrange(${1:var_name}, ${2:min}, ${3:max})
endsnippet

snippet !inr "not inrange condition"
!inrange(${1:var_name}, ${2:min}, ${3:max})
endsnippet

snippet '(?i)ld(\d+)(?:\s+(.*))?' "label define + label values with N pairs" rb
label define ${1:label_name} `!p
import shlex
n = int(match.group(1))                  # ldN → N pairs
values_str = match.group(2) or ""        # 뒤따르는 값 목록(선택)
values = shlex.split(values_str) if values_str else []   # 공백/따옴표 처리
pairs = []
for i in range(1, n+1):
    if i <= len(values):
        pairs.append(f'{i} "{values[i-1]}"')            # 미리 입력한 값 사용
    else:
        ph = i + 2  # ${3}, ${4}, ...  (${1}=label_name, ${2}=var_name)
        pairs.append(f'{i} "${{{ph}:val{i}}}"')         # 플레이스홀더
snip.rv = " ".join(pairs)
`
label values ${2:var_name} $1
endsnippet

snippet lv "variable label"
label var ${1:var_name} "${2:var_label}"
endsnippet

snippet lo "local macro "
local ${1:macro name} ${2:macro exp}
endsnippet

snippet mer "merge"
merge ${1:1:1/n:n} ${2:var list} using ${3:file_name}
endsnippet

snippet oa "order alpha"
order ${1:var list} , alpha
endsnippet

snippet of "order first"
order ${1:var list} , first
endsnippet

snippet rp "replace"
replace ${1:varname} = ${2:exp} if ${3:condition}
endsnippet

snippet rn "rename" b
rename ${1:varname} ${2:exp}
endsnippet

snippet rnu "rename upper" b
rename _all , upper
endsnippet

snippet rnl "rename lower" b
rename _all , lower
endsnippet

snippet rec "recode with labels" b
recode ${1:varname}	${0:(1=0) (2=1)} , gen($2)
label variable $2 "${3:Recode of $1}"
endsnippet

snippet '' "Local macro quote" b
\`${1:local macro}'
endsnippet

snippet "" "Str quote"
"${1:str}"
endsnippet

snippet '" "Str local macro quote"
"\`${1:local macro}'"
endsnippet

snippet () "parentheses quote"
(${1:exp})
endsnippet

snippet {} "braces quote"
{
	${1:exp}
}
endsnippet

snippet ,gen "Generate option"
 , generate("${1:str}")
endsnippet

snippet ,r "replace option"
 , replace
endsnippet
